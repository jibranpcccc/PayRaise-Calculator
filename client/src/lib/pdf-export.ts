export interface PDFExportData {
  calculation: {
    currentSalary: number;
    newSalary: number;
    raiseAmount: number;
    raisePercentage: number;
    payPeriod: string;
  };
  analysis: {
    monthlyIncrease: number;
    weeklyIncrease: number;
    annualIncrease: number;
    realRaise?: number;
    industry?: string;
    industryComparison?: string;
  };
  projections?: {
    year: number;
    salary: number;
    totalIncrease: number;
  }[];
  metadata: {
    calculatedAt: Date;
    inflationRate: number;
  };
}

export class PDFExporter {
  static async exportCalculation(data: PDFExportData): Promise<void> {
    // This would integrate with jsPDF or similar library
    // For now, we'll create a detailed text export that could be converted to PDF
    
    const content = this.generatePDFContent(data);
    
    // Create a blob and download
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `pay-raise-analysis-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    URL.revokeObjectURL(url);
  }

  private static generatePDFContent(data: PDFExportData): string {
    const { calculation, analysis, projections, metadata } = data;
    
    return `
PAY RAISE CALCULATION REPORT
Generated: ${metadata.calculatedAt.toLocaleDateString()} at ${metadata.calculatedAt.toLocaleTimeString()}

SALARY CALCULATION SUMMARY
==========================
Current ${calculation.payPeriod} salary: ${this.formatCurrency(calculation.currentSalary)}
New ${calculation.payPeriod} salary: ${this.formatCurrency(calculation.newSalary)}
Raise amount: ${this.formatCurrency(calculation.raiseAmount)}
Raise percentage: ${calculation.raisePercentage.toFixed(2)}%

IMPACT ANALYSIS
===============
Annual increase: ${this.formatCurrency(analysis.annualIncrease)}
Monthly increase: ${this.formatCurrency(analysis.monthlyIncrease)}
Weekly increase: ${this.formatCurrency(analysis.weeklyIncrease)}

${analysis.realRaise ? `
INFLATION ANALYSIS
==================
Nominal raise: ${calculation.raisePercentage.toFixed(2)}%
Current inflation rate: ${metadata.inflationRate}%
Real raise (after inflation): ${analysis.realRaise.toFixed(2)}%
` : ''}

${analysis.industry ? `
INDUSTRY COMPARISON
===================
Industry: ${analysis.industry}
${analysis.industryComparison || 'No comparison data available'}
` : ''}

${projections && projections.length > 0 ? `
5-YEAR COMPOUND PROJECTIONS
===========================
${projections.map(p => 
  `Year ${p.year}: ${this.formatCurrency(p.salary)} (Total increase: ${this.formatCurrency(p.totalIncrease)})`
).join('\n')}
` : ''}

METHODOLOGY
===========
This calculation uses standard salary conversion formulas:
- Annual = Monthly × 12
- Annual = Weekly × 52  
- Annual = Hourly × Hours per week × 52

Inflation data sourced from Bureau of Labor Statistics.
Industry benchmarks based on 2025 market surveys.

DISCLAIMER
==========
This report is for informational purposes only. Actual salary 
negotiations should consider additional factors such as benefits, 
equity, work-life balance, and career growth opportunities.

Generated by PayRaisePercentageCalculator.com
    `.trim();
  }

  private static formatCurrency(amount: number): string {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  }
}
